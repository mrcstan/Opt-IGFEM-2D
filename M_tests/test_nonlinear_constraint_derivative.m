%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Created by Marcus Tan on 12/25/2014
%%% Last modified on 9/8/2015
%%% Copyright 2012 University of Illinois at Urbana-Champaign. All rights reserved
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clc
close all
clear all
path(path, '../../IGFEM-Curves-2D/M_geom_toolbox')
path(path, '../../IGFEM-Curves-2D/M_postprocessing')
path(path, '../../IGFEM-Curves-2D/M_preFEM')
path(path, '../../IGFEM-Curves-2D/M_channels')
path(path, '../../IGFEM-Curves-2D/M_FEM')
path(path, '../../IGFEM-Curves-2D/mx_FEM')
path(path, '../../IGFEM-Curves-2D/ChannelFiles')
path(path,'../../NURBS/nurbs_toolbox')
path(path, '../M_optimization')
path(path, '../mx_sensitivity')
path(path, '../../SISL/mx_SISL')
path(path, '../M_opt_postprocessing')
path(path, '../InputFiles')
global G_simDirectory
global G_filePrefix
global G_out
global G_Tmax2TnRatio
global G_funcEvalCounter
global G_constraint
G_simDirectory = './';
G_filePrefix = 'test_P';
G_out = [];
G_Tmax2TnRatio = 1; % initial guess for ratio
G_funcEvalCounter = 0;
G_constraint.g = []; % constraint function values
G_constraint.history.nodalT = []; % Only applicable when the nodal temperature constraints are evaluated at different flow conditions
%% MESH AND USER INPUT
inputFile = 'DK_DP_check.in';
channelFile = 'DK_DP_check_branching.channel';

[mesh,femParams.gauss,...
 femParams.tol,...
 femParams.refine,...
 femParams.otherFlags,~, ...
 femParams.moveNode] = read_inputs(inputFile);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Other user inputs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
mesh.heatSourceFunc = [];
minPolyAngle = 5; % in degrees
minPolyArea = 0.001 * mesh.domainArea;
minSidePolyAngle = 0.5; % in degrees
minSidePolyArea = 0.001* mesh.domainArea;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SENSITIVITY ANALYSIS INPUT
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
senstvtyTriNpt1D = 4; % number of gauss points for line quadrature in sensitivity analysis
senstvtyTriNpt2D = 16; % number of gauss points for triangular quadrature in sensitivity analysis
senstvtyQuadNpt1D = 4; % number of gauss points in one direction for quad child element in polynomial IGFEM sensitivity analysis  
% Nonlinear constraints
readOptions.boundsFile = [];
readOptions.sampleFile = [];
readOptions.sampleNum = [];
readOptions.polygonFile = [];
readOptions.nlconfun = @nonlinear_constraints;
readOptions.nlcon.minPolyArea = 0.001*0.15*0.2;
readOptions.nlcon.sinMinPolyAngle = sin(5*pi/180);
readOptions.nlcon.minSidePolyArea = 0.001*0.15*0.2;
readOptions.nlcon.sinMinSidePolyAngle = sin(1*pi/180);
readOptions.nlcon.minDistSq = (0.001*0.15)^2;
readOptions.nlcon.areaScale = 0.15*0.2;
readOptions.nlcon.distSqScale = 0.15^2;
readOptions.nlcon.type = 'Pmin,Pmax';
readOptions.nlcon.minP = 15*1000;
readOptions.nlcon.maxP = 20*1000;
readOptions.nlcon.maxTmax = 60;
readOptions.nlcon.minAorVFrac = 0.018;
readOptions.nlcon.maxAorVFrac = 0.2;
readOptions.nlcon.area = mesh.domainArea;
readOptions.nlcon.nodalTbounds = [nan,70,-30,nan] + mesh.convect.Toffset;
readOptions.nlcon.massin = [nan,nan,5e-5,nan];
readOptions.nlcon.inBCs = [nan,nan,20,nan];
%% NO USER INPUT BELOW THIS LINE
%% Initialize required FEM data that does not change from one simulation to the next
sensitivity.gauss.line = gauss_points_and_weights(true,senstvtyTriNpt1D,1,'combined');
sensitivity.gauss.elem = gauss_points_and_weights(true,senstvtyTriNpt2D,2,'combined');
if (femParams.otherFlags.polyIGFEM)
    sensitivity.gauss.quadElem = gauss_points_and_weights(false,senstvtyQuadNpt1D,2,'combined');
end
%% Initialize required FEM data that does not change from one function evaluation to the next
% label edges for refinement later. Important!!!!!!!!!!
mesh.elem.elem_node = label(mesh.node.coords,mesh.elem.elem_node); 
% the edge_node information is generated by generate_conforming_mesh
%fprintf('generate edge_node \n')
mesh.edge.edge_node = find_edge_node(mesh.elem.elem_node);

mesh.edge.length = find_edge_length(mesh.edge.edge_node,mesh.node.coords);
mesh.edge.minLength = min(mesh.edge.length);
femParams.tol.halfLineWidth = mesh.edge.minLength*femParams.tol.halfLineWidthFrac;
femParams.moveNode.dist = mesh.edge.minLength*femParams.moveNode.distFrac;
options.Toffset = mesh.convect.Toffset;
[channels,sensitivity.designParams,sensitivity.restrictedParams]...
    = preprocess_channels(channelFile,readOptions);
sensitivity.costFunction.objOpt.nDesignParams = sensitivity.designParams.nParams;

%%
del = 1e-7;
method = 'central';

sensitivity.costFunction.type = 'AREA';
func = @(x) nonlinear_constraints(x,...
                                  sensitivity.designParams,...
                                  sensitivity.restrictedParams,...
                                  channels,readOptions.nlcon,...
                                  mesh,femParams,sensitivity);
nParams = sensitivity.designParams.nParams ...
            +sensitivity.restrictedParams.nParams;
xo = zeros(nParams,1);
[gOld,~,gradg] = func(xo);

FD_g = nan(nParams,numel(gOld));
for i = 1:nParams
    fprintf('\n-----------------------------------------------------------\n')
    fprintf('design param %i/%i',i,sensitivity.designParams.nParams);
    fprintf('\n-----------------------------------------------------------\n')
    if (strcmpi(method,'forward'))
        xdel = xo;
        xdel(i) = xdel(i) + del; 
        gNew1 = func(xdel);
        FD_g(i,:) = (gNew1 - gOld)'/del;
        
    elseif (strcmpi(method,'central'))
        xdel = xo;
        xdel(i) = xdel(i) + del; 
        gNew2 = func(xdel);

        xdel = xo;
        xdel(i) = xdel(i) - del; 
        gNew1 = func(xdel);

        FD_g(i,:) = 0.5*(gNew2 - gNew1)'/del;

    else
        error('unrecognized method')
    end
end
abs_gradg_diff = abs(FD_g - gradg);
fprintf('maximum abs diff = %g \n',max(abs_gradg_diff(:)));

tol = 1e-10;
nzInd = abs(gradg) > tol;
rel_diff = abs(1 - FD_g(nzInd)./gradg(nzInd));
fprintf('maximum rel diff = %g \n',max(rel_diff(:)));
